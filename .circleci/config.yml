version: 2.1 # 2.1 を使うと Orb や他の機能を使用することができます。 

# 設定で使用する Orb を宣言します。
# Orb に関する詳細は、 https://circleci.com/docs/ja/2.0/orb-intro/ をご覧ください。
orbs:
  ruby: circleci/ruby@1.1.2
  # node: circleci/node@2

jobs:
  build: #  "build"という名前の最初のジョブです。
    docker:
      # - image: cimg/ruby:2.7-node # カスタマイズされた CircleCI Docker イメージを使用します。
      - image: cimg/ruby:2.6.5
    working_directory: ~/sample_app
    steps:
      - checkout:
          path: ~/sample_app
      - ruby/install-deps

  test:
    docker:
      - image: cimg/ruby:2.6.5
      - image: cimg/postgres:11.12
        environment:
          POSTGRES_ROOT_PASSWORD: password
          POSTGRES_DATABASE: sample_app_test
          POSTGRES_USER: postgres
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      APP_DATABASE_HOST: "127.0.0.1"
      RAILS_ENV: test
    working_directory: ~/sample_app
    steps:
      - checkout:
          path: ~/sample_app
      - ruby/install-deps
      - run:
          name: Database setup
          command: bundle exec rails db:migrate
      - run:
          name: test
          command: bundle exec rspec
      
      # - run:
      #     name: DB の待機
      #     command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # - run:
      #     name: データベースのセットアップ
      #     command: bundle exec rails db:schema:load --trace
      # - run:
      #     name: rspecを実行
      #     command: bundle exec rspec

# ワークフローを使って上記で宣言したジョブをオーケストレーションします。

workflows:
  version: 2
  build_and_test:     # ワークフローの名前は "build_and_test" です。
    jobs:             # このワークフローの一部として実行するジョブのリストです。
      - build         # まず、ビルドを実行します。
      - test:         # 次に、テストを実行します。
          requires:   # テストを実行するにはビルドを渡す必要があります。
            - build   # 最後に、ビルドしたジョブを実行します。
